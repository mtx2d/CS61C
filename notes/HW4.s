HW4


Section 5: RISC-V to Machine Code

R Format: funct7(25-31), rs2(20-24), rs1(15-19), funct3(12-14), rd(7-11), opcode(0-6)
I Format: immediate(20-31), rs1(15-19), funct3(12-14), rd(7-11), opcode(0-6)
L Format: 20-31: offset, 15-19: rs1, 12-14: funct3, 7-11: rd, 0-6: opcode = LOAD
S Format: 25-31: offset part1, 20-24: rs2, 15-19: rs1, 12-14: funct3, 7-11: offset part2, 0-6: opcode
Jal Format: 31: imm[20], 30-21: imm[10:1], 20: imm[11], 19-12: imm[19:12], 11-7: rd, 0-6: opcode
B format: 31: imm[12], 25-30: imm[10:5], 20-24: rs2, 15-19: rs1, 12-14: funct3, 8-11:imm[4:1], 7:imm[11], 0-6:opcode

1. sub s0, t0, t2
opcode (0-6) = 0110011
rd (7-11)= s0 = 8 = 01000
funct3 (12-14): 0x0 = 000
rs1(15-19) = t0 = 5 = 00101
rs2(20-24) = t2 = 7 = 00111
funct7 (25-31): 0x20 = 0100000
[0100000][00111][00101][000][01000][0110011]
[0100][0000][0111][0010][1000][0100[0011][0011]
40728433

2. slli a0, t0, 3
opcode (0-6) = 0010011
rd (7-11)= a0 = 10 = 01010
funct3 (12-14): 0x1 = 001
rs1(15-19) = t0 = 5 = 00101
imm (20-31): 0x20 = 0000 0000 0011
0000 0000 0011 00101 001 01010 0010011
0000 0000 0011 0010 1001 0101 0001 0011
0x00329513

3. sw t0, 4(s0)
0-6: opcode = 0100011
7-11: offset part2 = 00100
12-14: funct3 = 0x2 = 010
15-19: rs1 = s0 = 8 = 01000
20-24: rs2  = t0 = 5 = 00101
25-31: offset part1 = 0000000

0000000 00101 01000 010 00100 0100011
0000 0000 0101 0100 0010 0010 0010 0011
0x00542223

4. jal ra, fib
PC = 0x0040014, fib = 0x0040028

Immediate = 0x14 = 0000 0000 0000 0001 0100 (account for *2) --> 0000 0000 0000 0000 1010
31: imm[20] = 0
30-21: imm[10:1] = 00 0000 1010
20: imm[11] = 0
19-12: imm[19:12] = 0000 0000
11-7: rd = ra = 1 = 00001
0-6: opcode = 1101111
0 00 0000 1010 0 0000 0000 00001 1101111
0000 0001 0100 0000 0000 0000 1110 1111
0x014000EF

5. beq t3, t5, NEXT
- Note:  (12 bits code even 13 bit signed byte offsets b/c last bit always 0)
PC = 0x0040011C
NEXT = 0x0040010C
Immediate = -16 (account for *2) --> -8 = 1111 1111 1000

31: imm[12] = 1
25-30: imm[10:5] = 1111 11
20-24: rs2 = t5 = 30 = 11110
15-19: rs1 = t3 = 28 = 11100
12-14: funct3 = 000
8-11:imm[4:1] = 1000
7:imm[11] = 1
0-6:opcode = 1100011
1 1111 11 11110 11100 000 1000 1 1100011
1111 1111 1110 1110 0000 1000 1110 0011
0xFFEE08E3


Section 6: Machine Code --> RISCV Instructions
PC =    0x00400010
func1 = 0x00400000
func2 = 0x00400018

1. 0x00598523
0000 0000 0101 1001 1000 0101 0010 0011
0000 000 00101 10011 000 01010 0100011
0-6:  opcode = 010 0011 = S type
7-11: offset part2 = 01010 = 01010
12-14: funct3 = 000 = 0x0 = sb
15-19: rs1 = 10011 = 19 = s3
20-24: rs2  = 00101 = 5 = t0
25-31: offset part1 = 0000 000
Combined offset: 0000 000 01010 = 10
Finally: sb t0, 10(s3)

2. 0x00b542b3
0000 0000 1011 0101 0100 0010 1011 0011
0000000 01011 01010 100 00101 0110011
opcode(0-6) = 011 0011 = R type
rd (7-11)= 00101 = 5 = t0
funct3 (12-14): 100 = 0x4 = xor
rs1(15-19) = 01010 = 10 = a0
rs2(20-24) = 01011 = 11 = a1
funct7 (25-31): 0000000 = 0x0 = xor
xor t0, a0, a1

3. 0x00728463
0000 0000 0111 0010 1000 0100 0110 0011
0 00 0000 00111 00101 000 0100 0 1100011
31:    imm[12] = 0
25-30: imm[10:5] = 00 0000
20-24: rs2 = 00111 = 7 = t2
15-19: rs1 = 00101 = 5 = t0
12-14: funct3 = 000 = beq
8-11:  imm[4:1] = 0100
7:     imm[11] = 0
0-6:   opcode = 1100011 = B type
Immediate = 00000000100 = 0x4 (account for *2) --> 0x8
beq t0, t2, func2

4. 0xFF1FF06F
1111 1111 0001 1111 1111 0000 0110 1111
1 [11 1111 1000] 1 [1111 1111] 00000 1101111
31: imm[20] = 1
30-21: imm[10:1] = 11 1111 1000
20: imm[11] = 1
19-12: imm[19:12] = 1111 1111
11-7: rd = 00000 = zero
0-6: opcode = 1101111 = jal
Immediate = 11111111111111111000 = -8 (account for *2) --> -16
jal x0, func1

lbu a1, 52(s4)
L Format: 20-31: offset, 15-19: rs1, 12-14: funct3, 7-11: rd, 0-6: opcode = LOAD
- Offset = 52 = 00000 1110100
- RS1 = s4 = 20 = 10100
- funct3 = 4 = 100
- rd = a1 = 11 = 01011
- opcode = 0000011

[000000 110100] [10100] [100] [01011] [0000011]
0000 0011 0100 1010 0100 0101 1000 0011
0x034A4583
