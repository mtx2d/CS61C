import numc as nc

# Real Initializations
a0 = nc.Matrix([[1, -2, 3], [-4, 5, -6], [7, -8, 9]])
a1 = nc.Matrix(1, 3, [-3, -4, -5])
a2 = nc.Matrix(3, 1, [-10, -11, -12])
a3 = nc.Matrix(3, 1, [5, 4, -2])
a4 = nc.Matrix([[1, 2, 3, 4, 5, 6]])
a5 = nc.Matrix([[1, -1], [-1, 1]])
a6 = nc.Matrix([[-5]])
a7 = nc.Matrix(4, 4)
a7[1] = [2, 2, 2, 2] # [[0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 2.0, 2.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
a7[1:5, 2:3] = [3, 1, 5] # [[0.0, 0.0, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 5.0, 0.0]]
a11 = nc.Matrix(3, 3, 2)
a12 = nc.Matrix(3, 3, [-1, -2, -3, -4, -5, -6, -7, -8, -9])

# Faulty Initializations nc.Matrix(2, 3, [[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) # ValueError: Incorrect number of elements nc.Matrix(-1, 3, [[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) # Value Error: Incorrect number of elements nc.Matrix(2, 2, [1, 1, 1, 1, 1]) # Value Error: Incorrect number of elements nc.Matrix([[1, 1, 1], [2, 2]]) # Value Error: List values invalid nc.Matrix([1, 2, 3, 4]) # Value Error: List values invalid nc.Matrix(-1, 2) # Value Error: Dimensions must be positive nc.Matrix(-1, 2, 1) # Value Error: Dimensions must be positive nc.Matrix(1/4, 5) # Type Error nc.Matrix(4, 4, 4, 4) # TypeError nc.Matrix(0.25) # Type Error

# Testing Basic Operations

# Addition
a2 + a3 # [-5.0, -7.0, -14.0]
a11 + a12 # [[1.0, 0.0, -1.0], [-2.0, -3.0, -4.0], [-5.0, -6.0, -7.0]]
a12 + a12 + a12 # [[-3.0, -6.0, -9.0], [-12.0, -15.0, -18.0], [-21.0, -24.0, -27.0]]
a2 + a11 # ValueError: Dimensions invalid
a12 + 5 # TypeError
a12 + [1, 1] # Type Error
+a12 # Type Error: bad operand type
#[1, 1] + a12 # Segfault

# Subtraction
a2 - a3 # [-15.0, -15.0, -10.0]
a11 - a12 # [[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]]
a2 - a11 # ValueError: Dimensions invalid
a12 - 5 # TypeError
a12 - [1, 1] # Type Error

# Negation
-a2 # [10.0, 11.0, 12.0]
-a12 # [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
--a12 # [-10.0, -11.0, -12.0]


# Absolute Value
abs(a2) # [10.0, 11.0, 12.0]
abs(a12) # [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]

# Multiply
a12 * a11 # [[-12.0, -12.0, -12.0], [-30.0, -30.0, -30.0], [-48.0, -48.0, -48.0]]
a11 * a2 # [-66.0, -66.0, -66.0]
a2 * a11 # Value Error: Argument Dimensions Invalid
a2 * 5 # TypeError

# Testing for Power
a5 ** 0 # [[1.0, 0.0], [0.0, 1.0]]
a5 ** 1 # [[2.0, -2.0], [-2.0, 2.0]]
a5 ** 4 # [[8.0, -8.0], [-8.0, 8.0]]
a6 ** 0 # [1.0]
a6 ** 2 # [25.0]
a5 ** [1] # Type Error
a5 ** -1 # Value Error
a5 ** 1/4 # Type Error
a5 ** 0.25 # Type Error
a1 ** -1 # Value Error
a1 ** 1 # Value Error


'''
a2 - a3 # [-15.0, -15.0, -10.0]
abs(a2) # [10.0, 11.0, 12.0]
abs(a2 - a3) # [15.0, 15.0, 10.0]
-a0 # [[-1.0, 2.0, -3.0], [4.0, -5.0, 6.0], [-7.0, 8.0, -9.0]]
'''

# Slicing?
a8 = a7[:, 1:5]
a8 # [[0.0, 0.0, 0.0], [2.0, 3.0, 2.0], [0.0, 1.0, 0.0], [0.0, 5.0, 0.0]]
a8[-2, -2] # Index Error
a8[0, 0] # 0.0
a8[0][0] = -0.25
a9 = a8[:, :]
a9 # [[-0.25, 0.0, 0.0], [2.0, 3.0, 2.0], [0.0, 1.0, 0.0], [0.0, 5.0, 0.0]]
a7 # [[0.0, -0.25, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 5.0, 0.0]]
a10 = a7[:, ] # Type Error
a10 = a7[2:, :2] # [[0.0, 0.0], [0.0, 0.0]]
a10[:, 1:] = [0.75, 1.25]
a10 # [[0.0, 0.75], [0.0, 1.25]]
a9 # [[-0.25, 0.0, 0.0], [2.0, 3.0, 2.0], [0.75, 1.0, 0.0], [1.25, 5.0, 0.0]]
a7 # [[0.0, -0.25, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.75, 1.0, 0.0], [0.0, 1.25, 5.0, 0.0]]
a7[:] # [[0.0, -0.25, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.75, 1.0, 0.0], [0.0, 1.25, 5.0, 0.0]]
a7[2:4, 0:] # [[0.0, 0.75, 1.0, 0.0], [0.0, 1.25, 5.0, 0.0]]
a7[3:] # [0.0, 1.25, 5.0, 0.0]
a7[2:3, 1:2] # 0.75
a7[2:2] # Value Error
a7[:, 1:4] # [[-0.25, 0.0, 0.0], [2.0, 3.0, 2.0], [0.75, 1.0, 0.0], [1.25, 5.0, 0.0]]
a7[0, 3] # 0.0
a7[0][3] # 0.0
a7[:][:] # [[0.0, -0.25, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.75, 1.0, 0.0], [0.0, 1.25, 5.0, 0.0]]
a7[2][:] # [0.0, 0.75, 1.0, 0.0]
a7[2:5][3:5] # Value Error
a7[2:5][1:] = [-10, -9, -8, -7]
a7 # [[0.0, -0.25, 0.0, 0.0], [2.0, 2.0, 3.0, 2.0], [0.0, 0.75, 1.0, 0.0], [-10.0, -9.0, -8.0, -7.0]]
a7[1, 2:3] # 3.0
a7[1, 2:3].shape # Attribute Error

# Testing Some Indexing
a6[:] # -5.0
a6[1] # Index Error
a6[0:] # -5.0
a6 * a6 # [25.0]
a6[:, :] # Type Error
a6[2:3, :] # Type Error
a6[:, :3] # Type Error

a5[1:3, 0:] # [-1.0, 1.0]
a5[1:, :2] #[-1.0, 1.0]
a5 + a5[1:3, 0:] # Value Error

# Testing Operations for 1D matrices
a4[0:3] # [1.0, 2.0, 3.0]
a4[0:3:1] # [1.0, 2.0, 3.0]
a4[-1] # Index out of range
a4[0:3:2] # Value Error
a4[0:1, 0:1] # Type Error
a4[:, :] # Type Error
a4.shape # (6,)
a1 * a3 # [-21.0]

# More Slices
a13 = nc.Matrix(3, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9])
a13[0:1, 0:1] = -a13[0:1, 0:1]
a13 # [[-1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
a13[0:1, 0:1] = [5] # Type Error
a13[0:2, 0:2] = [4, 4, 4, 4] # Value Error
a13[0:2, 0:2] = [[4, 4], [6, 6]]
a13 # [[4.0, 4.0, 3.0], [6.0, 6.0, 6.0], [7.0, 8.0, 9.0]]
a13[1, 1] = [-2.0]
a13[1, 1] = -2
a13 # [[4.0, 4.0, 3.0], [6.0, -2.0, 6.0], [7.0, 8.0, 9.0]]
a13[:5] # [[4.0, 4.0, 3.0], [6.0, -2.0, 6.0], [7.0, 8.0, 9.0]]
a13[2:, ] # Type Error
a13[0, :] = [1, 2, 5]
a13 # [[1.0, 2.0, 5.0], [6.0, -2.0, 6.0], [7.0, 8.0, 9.0]]

i1 = nc.Matrix(1, 3, [[1], [-5], [3]]) # Type Error
i2 = nc.Matrix(4, 1, [[1, -1, 2, -2]]) # Type Error


